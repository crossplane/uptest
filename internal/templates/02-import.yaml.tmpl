# This file belongs to the resource import step.
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
- command: ${KUBECTL} annotate managed --all crossplane.io/paused=true --overwrite
- command: ${KUBECTL} scale deployment crossplane -n ${CROSSPLANE_NAMESPACE} --replicas=0 --timeout 10s
- script: ${KUBECTL} -n ${CROSSPLANE_NAMESPACE} get deploy --no-headers -o custom-columns=":metadata.name" | grep "provider-" | xargs ${KUBECTL} -n ${CROSSPLANE_NAMESPACE} scale deploy --replicas=0
- command: sleep 10
- command: ${KUBECTL} scale deployment crossplane -n ${CROSSPLANE_NAMESPACE} --replicas=1 --timeout 10s
- script: ${KUBECTL} -n ${CROSSPLANE_NAMESPACE} get deploy --no-headers -o custom-columns=":metadata.name" | grep "provider-" | xargs ${KUBECTL} -n ${CROSSPLANE_NAMESPACE} scale deploy --replicas=1
- script: |
    #!/bin/bash

    function check_endpoints {
      endpoints=$(${KUBECTL} -n ${CROSSPLANE_NAMESPACE} get endpoints --no-headers | grep '^provider-' | awk '{print $1}')

      for endpoint in $endpoints; do
        port=$(${KUBECTL} -n ${CROSSPLANE_NAMESPACE} get endpoints $endpoint -o jsonpath='{.subsets[*].ports[0].port}')
        if [[ -z "${port}" ]]; then
          echo "$endpoint - No served ports"
          return 1
        else
          echo "$endpoint - Ports present"
        fi
      done

      if ${KUBECTL} get managed ; then
          return 0
      else
          return 1
      fi
    }

    attempt=1
    max_attempts=10

    while [[ $attempt -le $max_attempts ]]; do
        if check_endpoints; then
            exit 0
        else
            printf "Retrying... (%d/%d)\n" "$attempt" "$max_attempts" >&2
        fi
        ((attempt++))
        sleep 5
    done

    exit 1
{{- range $resource := .Resources }}
{{- if eq $resource.KindGroup "secret." -}}
  {{continue}}
{{- end -}}
{{- if not $resource.Namespace }}
- command: ${KUBECTL} --subresource=status patch {{ $resource.KindGroup }}/{{ $resource.Name }} --type=merge -p '{"status":{"conditions":[]}}'
- script: ${KUBECTL} annotate {{ $resource.KindGroup }}/{{ $resource.Name }} uptest-old-id=$(${KUBECTL} get {{ $resource.KindGroup }}/{{ $resource.Name }} -o=jsonpath='{.status.atProvider.id}') --overwrite
{{- end }}
{{- end }}
- command: ${KUBECTL} annotate managed --all crossplane.io/paused=false --overwrite
