name: Provider Publish Service Artifacts

on:
  workflow_call:
    inputs:
      subpackages:
        description: 'Subpackages to be built individually (e.g. monolith config ec2)'
        default: 'monolith'
        required: false
        type: string
      version:
        description: 'Provider version (e.g. v0.1.0)'
        required: true
        type: string
      size:
        description: "Number of packages to build and push with each matrix build job"
        required: true
        default: 30
        type: number
      concurrency:
        description: "Number of parallel package builds in each matrix job"
        optional: true
        default: 0
        type: number
    secrets:
      UPBOUND_MARKETPLACE_PUSH_ROBOT_USR:
        required: true
      UPBOUND_MARKETPLACE_PUSH_ROBOT_PSW:
        required: true

env:
  # Common versions
  GO_VERSION: '1.19'
  GOLANGCI_VERSION: 'v1.50.0'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

  # Common users. We can't run a step 'if secrets.XXX != ""' but we can run a
  # step 'if env.XXX' != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  UPBOUND_MARKETPLACE_PUSH_ROBOT_USR: ${{ secrets.UPBOUND_MARKETPLACE_PUSH_ROBOT_USR }}
  
jobs:
  index:
    runs-on: [e2-standard-8, linux]
    outputs:
      indices: ${{ steps.calc.outputs.indices }}
    steps:
      - id: calc
        run: |
          python3 -c "import math; print(f'indices={list(range(0, math.ceil(len(\"${{ inputs.subpackages }}\".split()) / int(\"${{ inputs.size }}\"))))}')" >> "$GITHUB_OUTPUT"

  publish-service-artifacts:
    strategy:
      matrix:
        index: ${{ fromJSON(needs.index.outputs.indices) }}

    needs: index
    runs-on: [e2-standard-8, linux]
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Login to Upbound
        uses: docker/login-action@v2
        if: env.UPBOUND_MARKETPLACE_PUSH_ROBOT_USR != ''
        with:
          registry: xpkg.upbound.io
          username: ${{ secrets.UPBOUND_MARKETPLACE_PUSH_ROBOT_USR }}
          password: ${{ secrets.UPBOUND_MARKETPLACE_PUSH_ROBOT_PSW }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go_cache
        run: |
          echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT && \
          echo "mod_cache=$(make go.mod.cachedir)" >> $GITHUB_OUTPUT

      - name: Cache the Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go_cache.outputs.cache }}
          key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-publish-artifacts-

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.go_cache.outputs.mod_cache }}
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Calculate packages to build & push
        id: packages
        run: |
          echo target=$(python3 -c "print(' '.join(\"${{ inputs.subpackages }}\".split()[int(\"${{ matrix.index }}\") * int(\"${{ inputs.size }}\"): (int(\"${{ matrix.index }}\")+1) * int(\"${{ inputs.size }}\")]))") >> "$GITHUB_OUTPUT"

      - name: Build Artifacts
        id: build_artifacts
        run: |
          packages=($(echo ${{ steps.packages.outputs.target }} | tr ' ' '\n'))
          num_packages=${#packages[@]}
          if [ $num_packages -gt 10 ]; then
            num_packages=10
          fi
          make -j $num_packages SUBPACKAGES="${{ steps.packages.outputs.target }}" XPKG_REG_ORGS=xpkg.upbound.io/upbound-release-candidates XPKG_REG_ORGS_NO_PROMOTE=xpkg.upbound.io/upbound-release-candidates VERSION=${{ inputs.version }} build.all
          echo "num_packages=$num_packages" >> $GITHUB_OUTPUT
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

      - name: Publish Artifacts
        run: |
          make -j ${{ steps.build_artifacts.outputs.num_packages }} SUBPACKAGES="${{ steps.packages.outputs.target }}" XPKG_REG_ORGS=xpkg.upbound.io/upbound-release-candidates XPKG_REG_ORGS_NO_PROMOTE=xpkg.upbound.io/upbound-release-candidates VERSION=${{ inputs.version }} CONCURRENCY="${{ inputs.concurrency }}" publish
